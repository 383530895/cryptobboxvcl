(******************************************************)
(*                                                    *)
(*            EldoS SecureBlackbox Library            *)
(*                                                    *)
(*      Copyright (c) 2002-2014 EldoS Corporation     *)
(*           http://www.secureblackbox.com            *)
(*                                                    *)
(******************************************************)

{$I SecBbox.inc}

unit SBECCommon;

interface

uses
  SysUtils,
  SBConstants,
  SBTypes,
  SBUtils,
  SBMath,
  SBECMath;

type

  TElECDomainParameters = class
    FA : ByteArray;
    FB : ByteArray;
    FP : ByteArray;
    FN : ByteArray;
    FH : integer;
    FX : ByteArray;
    FY : ByteArray;
    FSeed : ByteArray;
    FCurve : integer;
    FCurveOID : ByteArray;
    FFieldType : integer;
    FField : integer;
    FK1 : integer;
    FK2 : integer;
    FK3 : integer;
    FM : integer;
    procedure SetupCurveParameters(Curve : integer);
    procedure SetP(const Value : ByteArray);
    procedure UpdateP;
    procedure SetM(Value : integer);
    procedure SetK1(Value : integer);
    procedure SetK2(Value : integer);
    procedure SetK3(Value : integer);
    procedure SetField(Value : integer);
    procedure SetCurve(Value : integer);
    procedure SetCurveOID(const Value : ByteArray);
    procedure SetSeed(const Value : ByteArray);
    procedure SetA(const V : ByteArray);
    procedure SetB(const V : ByteArray);
    procedure SetN(const V : ByteArray);
    procedure SetX(const V : ByteArray);
    procedure SetY(const V : ByteArray);
    function GetFieldBits : integer;
    function GetSubgroupBits : integer;
  public
    constructor Create;
     destructor  Destroy; override;
    procedure Reset;
    function Check : boolean;

    property Curve : integer read FCurve write SetCurve;
    property CurveOID : ByteArray read FCurveOID write SetCurveOID;
    property P : ByteArray read FP write SetP; // group modulus
    property A : ByteArray read FA write SetA; // curve A parameter
    property B : ByteArray read FB write SetB; // curve B parameter
    property N : ByteArray read FN write SetN; //base point order
    property H : integer read FH write FH; // cofactor
    property X : ByteArray read FX write SetX; // base point
    property Y : ByteArray read FY write SetY;
    property Seed : ByteArray read FSeed write SetSeed;

    property FieldType : integer read FFieldType write FFieldType;
    property Field : integer read FField write SetField;
    property FieldBits : integer read GetFieldBits;
    property SubgroupBits : integer read GetSubgroupBits;
    property M : integer read FM write SetM;

    property K1 : integer read FK1 write SetK1;
    property K2 : integer read FK2 write SetK2;
    property K3 : integer read FK3 write SetK3;
  end;
  

function GetCurveByOID(const OID : ByteArray) : integer;
function GetOIDByCurve(Curve : integer) : ByteArray;
function IsPointCompressed(Buffer : pointer; Size : integer) : boolean;
function BufferToPoint(Buffer : pointer; Size : integer;
  DomainParams : TElECDomainParameters; X : pointer;
  var XSize : integer; Y : pointer; var YSize : integer) : boolean;
function PointToBuffer(X : pointer; XSize : integer; Y : pointer;
  YSize : integer; DomainParams : TElECDomainParameters;
  Buffer : pointer; var Size : integer; Compress, Hybrid : boolean) : boolean;
function ValidateKey(DomainParams : TElECDomainParameters;
  D : pointer ; DSize : integer; Qx : pointer; QxSize : integer;
  Qy : pointer; QySize : integer) : boolean;
function HexStrToFieldElement(const Src : string; LittleEndian : boolean; PSize : integer) : ByteArray; 
procedure BufferToFieldElement(const Buf : ByteArray; var A : PLInt; P : PLInt);   overload; 
procedure BufferToFieldElement(Buf : pointer; Size : integer; var A : PLInt; P : PLInt); overload;

type
  EElECPointCompressionError =  class(EElECError);

implementation

resourcestring
  //SPointCompressionFailed = 'Point compression failed';
  SInvalidDomainParameters = 'Invalid domain parameters';
  SInvalidPoint = 'Invalid point';
  SUnknownCurve = 'Unknown curve';
  //SUnknownField = 'Unknown field';

const
  { field modules }
  FLD_P112_P  = 'DB7C2ABF62E35E668076BEAD208B';
  FLD_P128_P  = 'FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF';
  FLD_P160L_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73';
  FLD_P160S_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF';
  FLD_P192L_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37';
  FLD_P192S_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF';
  FLD_P224L_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFE56D';
  FLD_P224S_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001';
  FLD_P256L_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F';
  FLD_P256S_P = 'FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF';
  FLD_P384_P  = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF';
  FLD_P521_P  = '1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF';
  FLD_B163_P  = '0800000000000000000000000000000000000000C9';
  FLD_B233_P  = '020000000000000000000000000000000000000004000000000000000001';
  FLD_B283_P  = '0800000000000000000000000000000000000000000000000000000000000000000010A1';
  FLD_B409_P  = '02000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000001';
  FLD_B571_P  = '080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000425';

  { EC parameters }
  { curves over prime fields }

  { SECP112R1 }
  //EC_SECP112R1_P = FLD_P112_P
  EC_SECP112R1_A = 'DB7C2ABF62E35E668076BEAD2088';
  EC_SECP112R1_B = '659EF8BA043916EEDE8911702B22';
  EC_SECP112R1_N = 'DB7C2ABF62E35E7628DFAC6561C5';
  EC_SECP112R1_H = 1;
  EC_SECP112R1_X = '09487239995A5EE76B55F9C2F098';
  EC_SECP112R1_Y = 'A89CE5AF8724C0A23E0E0FF77500';
  EC_SECP112R1_S = '00F50B028E4D696E676875615175290472783FB1';
  { SECP112R2 }
  //EC_SECP112R2_P = FLD_P112_P;
  EC_SECP112R2_A = '6127C24C05F38A0AAAF65C0EF02C';
  EC_SECP112R2_B = '51DEF1815DB5ED74FCC34C85D709';
  EC_SECP112R2_N = '36DF0AAFD8B8D7597CA10520D04B';
  EC_SECP112R2_H = 4;
  EC_SECP112R2_X = '4BA30AB5E892B4E1649DD0928643';
  EC_SECP112R2_Y = 'ADCD46F5882E3747DEF36E956E97';
  EC_SECP112R2_S = '002757A1114D696E6768756151755316C05E0BD4';
  { SECP128R1 }
  //EC_SECP128R1_P = FLD_P128_P;
  EC_SECP128R1_A = 'FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC';
  EC_SECP128R1_B = 'E87579C11079F43DD824993C2CEE5ED3';
  EC_SECP128R1_N = 'FFFFFFFE0000000075A30D1B9038A115';
  EC_SECP128R1_H = 1;
  EC_SECP128R1_X = '161FF7528B899B2D0C28607CA52C5B86';
  EC_SECP128R1_Y = 'CF5AC8395BAFEB13C02DA292DDED7A83';
  EC_SECP128R1_S = '000E0D4D696E6768756151750CC03A4473D03679';
  { SECP128R2 }
  //EC_SECP128R2_P = FLD_P128_P;
  EC_SECP128R2_A = 'D6031998D1B3BBFEBF59CC9BBFF9AEE1';
  EC_SECP128R2_B = '5EEEFCA380D02919DC2C6558BB6D8A5D';
  EC_SECP128R2_N = '3FFFFFFF7FFFFFFFBE0024720613B5A3';
  EC_SECP128R2_H = 4;
  EC_SECP128R2_X = '7B6AA5D85E572983E6FB32A7CDEBC140';
  EC_SECP128R2_Y = '27B6916A894D3AEE7106FE805FC34B44';
  EC_SECP128R2_S = '004D696E67687561517512D8F03431FCE63B88F4';
  { SECP160K1 }
  //EC_SECP160K1_P = FLD_P160L_P;
  EC_SECP160K1_A = '00';
  EC_SECP160K1_B = '07';
  EC_SECP160K1_N = '0100000000000000000001B8FA16DFAB9ACA16B6B3';
  EC_SECP160K1_H = 1;
  EC_SECP160K1_X = '3B4C382CE37AA192A4019E763036F4F5DD4D7EBB';
  EC_SECP160K1_Y = '938CF935318FDCED6BC28286531733C3F03C4FEE';
  { SECP160R1 }
  //EC_SECP160R1_P = FLD_P160S_P;
  EC_SECP160R1_A = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC';
  EC_SECP160R1_B = '1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45';
  EC_SECP160R1_N = '0100000000000000000001F4C8F927AED3CA752257';
  EC_SECP160R1_H = 1;
  EC_SECP160R1_X = '4A96B5688EF573284664698968C38BB913CBFC82';
  EC_SECP160R1_Y = '23A628553168947D59DCC912042351377AC5FB32';
  EC_SECP160R1_S = '1053CDE42C14D696E67687561517533BF3F83345';
  { SECP160R2 }
  //EC_SECP160R2_P = FLD_P160L_P;;
  EC_SECP160R2_A = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC70';
  EC_SECP160R2_B = 'B4E134D3FB59EB8BAB57274904664D5AF50388BA';
  EC_SECP160R2_N = '0100000000000000000000351EE786A818F3A1A16B';
  EC_SECP160R2_H = 1;
  EC_SECP160R2_X = '52DCB034293A117E1F4FF11B30F7199D3144CE6D';
  EC_SECP160R2_Y = 'FEAFFEF2E331F296E071FA0DF9982CFEA7D43F2E';
  EC_SECP160R2_S = 'B99B99B099B323E02709A4D696E6768756151751';
  { SECP192K1 }
  //EC_SECP192K1_P = FLD_P192L_P;
  EC_SECP192K1_A = '00';
  EC_SECP192K1_B = '03';
  EC_SECP192K1_N = 'FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D';
  EC_SECP192K1_H = 1;
  EC_SECP192K1_X = 'DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D';
  EC_SECP192K1_Y = '9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D';
  { SECP192R1 }
  //EC_SECP192R1_P = FLD_P192S_P;
  EC_SECP192R1_A = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC';
  EC_SECP192R1_B = '64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1';
  EC_SECP192R1_N = 'FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831';
  EC_SECP192R1_H = 1;
  EC_SECP192R1_X = '188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012';
  EC_SECP192R1_Y = '07192B95FFC8DA78631011ED6B24CDD573F977A11E794811';
  EC_SECP192R1_S = '3045AE6FC8422F64ED579528D38120EAE12196D5';
  { SECP224K1 }
  //EC_SECP224K1_P = FLD_P224L_P;
  EC_SECP224K1_A = '00';
  EC_SECP224K1_B = '05';
  EC_SECP224K1_N = '010000000000000000000000000001DCE8D2EC6184CAF0A971769FB1F7';
  EC_SECP224K1_H = 1;
  EC_SECP224K1_X = 'A1455B334DF099DF30FC28A169A467E9E47075A90F7E650EB6B7A45C';
  EC_SECP224K1_Y = '7E089FED7FBA344282CAFBD6F7E319F7C0B0BD59E2CA4BDB556D61A5';
  { SECP224R1 }
  //EC_SECP224R1_P = FLD_P224S_P;
  EC_SECP224R1_A = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE';
  EC_SECP224R1_B = 'B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4';
  EC_SECP224R1_N = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D';
  EC_SECP224R1_H = 1;
  EC_SECP224R1_X = 'B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21';
  EC_SECP224R1_Y = 'BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34';
  EC_SECP224R1_S = 'BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5';
  { SECP256K1 }
  //EC_SECP256K1_P = FLD_P256L_P;
  EC_SECP256K1_A = '00';
  EC_SECP256K1_B = '07';
  EC_SECP256K1_N = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141';
  EC_SECP256K1_H = 1;
  EC_SECP256K1_X = '79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798';
  EC_SECP256K1_Y = '483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8';
  { SECP256R1 }
  //EC_SECP256R1_P = FLD_P256S_P;
  EC_SECP256R1_A = 'FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC';
  EC_SECP256R1_B = '5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B';
  EC_SECP256R1_N = 'FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551';
  EC_SECP256R1_H = 1;
  EC_SECP256R1_X = '6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296';
  EC_SECP256R1_Y = '4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5';
  EC_SECP256R1_S = 'C49D360886E704936A6678E1139D26B7819F7E90';
  { SECP384R1 }
  //EC_SECP384R1_P = FLD_P384_P;
  EC_SECP384R1_A = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC';
  EC_SECP384R1_B = 'B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF';
  EC_SECP384R1_N = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973';
  EC_SECP384R1_H = 1;
  EC_SECP384R1_X = 'AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7';
  EC_SECP384R1_Y = '3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F';
  EC_SECP384R1_S = 'A335926AA319A27A1D00896A6773A4827ACDAC73';
  { SECP521R1 }
  //EC_SECP521R1_P = FLD_P521_P;
  EC_SECP521R1_A = '1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC';
  EC_SECP521R1_B = '051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00';
  EC_SECP521R1_N = '1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409';
  EC_SECP521R1_H = 1;
  EC_SECP521R1_X = '0C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66';
  EC_SECP521R1_Y = '11839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650';
  EC_SECP521R1_S = 'D09E8800291CB85396CC6717393284AAA0DA64BA';

  { curves over binary extended fields }

  { SECT113R1 }
  EC_SECT113R1_K = 9;
  EC_SECT113R1_A = '003088250CA6E7C7FE649CE85820F7';
  EC_SECT113R1_B = '00E8BEE4D3E2260744188BE0E9C723';
  EC_SECT113R1_N = '0100000000000000D9CCEC8A39E56F';
  EC_SECT113R1_H = 2;
  EC_SECT113R1_X = '009D73616F35F4AB1407D73562C10F';
  EC_SECT113R1_Y = '00A52830277958EE84D1315ED31886';
  EC_SECT113R1_S = '10E723AB14D696E6768756151756FEBF8FCB49A9';
  { SECT113R2 }
  EC_SECT113R2_K = 9;
  EC_SECT113R2_A = '00689918DBEC7E5A0DD6DFC0AA55C7';
  EC_SECT113R2_B = '0095E9A9EC9B297BD4BF36E059184F';
  EC_SECT113R2_N = '010000000000000108789B2496AF93';
  EC_SECT113R2_H = 2;
  EC_SECT113R2_X = '01A57A6A7B26CA5EF52FCDB8164797';
  EC_SECT113R2_Y = '00B3ADC94ED1FE674C06E695BABA1D';
  EC_SECT113R2_S = '10C0FB15760860DEF1EEF4D696E676875615175D';
  { SECT131R1 }
  EC_SECT131R1_K1 = 2;
  EC_SECT131R1_K2 = 3;
  EC_SECT131R1_K3 = 8;
  EC_SECT131R1_A = '07A11B09A76B562144418FF3FF8C2570B8';
  EC_SECT131R1_B = '0217C05610884B63B9C6C7291678F9D341';
  EC_SECT131R1_N = '0400000000000000023123953A9464B54D';
  EC_SECT131R1_H = 2;
  EC_SECT131R1_X = '0081BAF91FDF9833C40F9C181343638399';
  EC_SECT131R1_Y = '078C6E7EA38C001F73C8134B1B4EF9E150';
  EC_SECT131R1_S = '4D696E676875615175985BD3ADBADA21B43A97E2';
  { SECT131R2 }
  EC_SECT131R2_K1 = 2;
  EC_SECT131R2_K2 = 3;
  EC_SECT131R2_K3 = 8;
  EC_SECT131R2_A = '03E5A88919D7CAFCBF415F07C2176573B2';
  EC_SECT131R2_B = '04B8266A46C55657AC734CE38F018F2192';
  EC_SECT131R2_N = '0400000000000000016954A233049BA98F';
  EC_SECT131R2_H = 2;
  EC_SECT131R2_X = '0356DCD8F2F95031AD652D23951BB366A8';
  EC_SECT131R2_Y = '0648F06D867940A5366D9E265DE9EB240F';
  EC_SECT131R2_S = '985BD3ADBAD4D696E676875615175A21B43A97E3';
  { SECT163K1 }
  EC_SECT163K1_K1 = 3;
  EC_SECT163K1_K2 = 6;
  EC_SECT163K1_K3 = 7;
  EC_SECT163K1_A  = '01';
  EC_SECT163K1_B  = '01';
  EC_SECT163K1_N  = '04000000000000000000020108A2E0CC0D99F8A5EF';
  EC_SECT163K1_H  = 2;
  EC_SECT163K1_X  = '02FE13C0537BBC11ACAA07D793DE4E6D5E5C94EEE8';
  EC_SECT163K1_Y  = '0289070FB05D38FF58321F2E800536D538CCDAA3D9';
  { SECT163R1 }
  EC_SECT163R1_K1 = 3;
  EC_SECT163R1_K2 = 6;
  EC_SECT163R1_K3 = 7;
  EC_SECT163R1_A  = '07B6882CAAEFA84F9554FF8428BD88E246D2782AE2';
  EC_SECT163R1_B  = '0713612DCDDCB40AAB946BDA29CA91F73AF958AFD9';
  EC_SECT163R1_N  = '03FFFFFFFFFFFFFFFFFFFF48AAB689C29CA710279B';
  EC_SECT163R1_H  = 2;
  EC_SECT163R1_X  = '0369979697AB43897789566789567F787A7876A654';
  EC_SECT163R1_Y  = '00435EDB42EFAFB2989D51FEFCE3C80988F41FF883';
  EC_SECT163R1_S  = '24B7B137C8A14D696E6768756151756FD0DA2E5C';
  { SECT163R2 }
  EC_SECT163R2_K1 = 3;
  EC_SECT163R2_K2 = 6;
  EC_SECT163R2_K3 = 7;
  EC_SECT163R2_A  = '01';
  EC_SECT163R2_B  = '020A601907B8C953CA1481EB10512F78744A3205FD';
  EC_SECT163R2_N  = '040000000000000000000292FE77E70C12A4234C33';
  EC_SECT163R2_H  = 2;
  EC_SECT163R2_X  = '03F0EBA16286A2D57EA0991168D4994637E8343E36';
  EC_SECT163R2_Y  = 'D51FBC6C71A0094FA2CDD545B11C5C0C797324F1';
  EC_SECT163R2_S  = '85E25BFE5C86226CDB12016F7553F9D0E693A268';
  { SECT193R1 }
  EC_SECT193R1_K = 15;
  EC_SECT193R1_A  = '0017858FEB7A98975169E171F77B4087DE098AC8A911DF7B01';
  EC_SECT193R1_B  = '00FDFB49BFE6C3A89FACADAA7A1E5BBC7CC1C2E5D831478814';
  EC_SECT193R1_N  = '01000000000000000000000000C7F34A778F443ACC920EBA49';
  EC_SECT193R1_H  = 2;
  EC_SECT193R1_X  = '01F481BC5F0FF84A74AD6CDF6FDEF4BF6179625372D8C0C5E1';
  EC_SECT193R1_Y  = '0025E399F2903712CCF3EA9E3A1AD17FB0B3201B6AF7CE1B05';
  EC_SECT193R1_S  = '103FAEC74D696E676875615175777FC5B191EF30';
  { SECT193R2 }
  EC_SECT193R2_K = 15;
  EC_SECT193R2_A  = '0163F35A5137C2CE3EA6ED8667190B0BC43ECD69977702709B';
  EC_SECT193R2_B  = '00C9BB9E8927D4D64C377E2AB2856A5B16E3EFB7F61D4316AE';
  EC_SECT193R2_N  = '010000000000000000000000015AAB561B005413CCD4EE99D5';
  EC_SECT193R2_H  = 2;
  EC_SECT193R2_X  = '00D9B67D192E0367C803F39E1A7E82CA14A651350AAE617E8F';
  EC_SECT193R2_Y  = '01CE94335607C304AC29E7DEFBD9CA01F596F927224CDECF6C';
  EC_SECT193R2_S  = '10B7B4D696E676875615175137C8A16FD0DA2211';
  { SECT233K1 }
  EC_SECT233K1_K  = 74;
  EC_SECT233K1_A  = '00';
  EC_SECT233K1_B  = '01';
  EC_SECT233K1_N  = '8000000000000000000000000000069D5BB915BCD46EFB1AD5F173ABDF';
  EC_SECT233K1_H  = 4;
  EC_SECT233K1_X  = '017232BA853A7E731AF129F22FF4149563A419C26BF50A4C9D6EEFAD6126';
  EC_SECT233K1_Y  = '01DB537DECE819B7F70F555A67C427A8CD9BF18AEB9B56E0C11056FAE6A3';
  { SECT233R1 }
  EC_SECT233R1_K  = 74;
  EC_SECT233R1_A  = '01';
  EC_SECT233R1_B  = '66647EDE6C332C7F8C0923BB58213B333B20E9CE4281FE115F7D8F90AD';
  EC_SECT233R1_N  = '01000000000000000000000000000013E974E72F8A6922031D2603CFE0D7';
  EC_SECT233R1_H  = 2;
  EC_SECT233R1_X  = 'FAC9DFCBAC8313BB2139F1BB755FEF65BC391F8B36F8F8EB7371FD558B';
  EC_SECT233R1_Y  = '01006A08A41903350678E58528BEBF8A0BEFF867A7CA36716F7E01F81052';
  EC_SECT233R1_S  = '74D59FF07F6B413D0EA14B344B20A2DB049B50C3';
  { SECT239K1 }
  EC_SECT239K1_K = 158;
  EC_SECT239K1_A  = '00';
  EC_SECT239K1_B  = '01';
  EC_SECT239K1_N  = '2000000000000000000000000000005A79FEC67CB6E91F1C1DA800E478A5';
  EC_SECT239K1_H  = 4;
  EC_SECT239K1_X  = '29A0B6A887A983E9730988A68727A8B2D126C44CC2CC7B2A6555193035DC';
  EC_SECT239K1_Y  = '76310804F12E549BDB011C103089E73510ACB275FC312A5DC6B76553F0CA';
  { SECT283K1 }
  EC_SECT283K1_K1 = 5;
  EC_SECT283K1_K2 = 7;
  EC_SECT283K1_K3 = 12;
  EC_SECT283K1_A  = '00';
  EC_SECT283K1_B  = '01';
  EC_SECT283K1_N  = '01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9AE2ED07577265DFF7F94451E061E163C61';
  EC_SECT283K1_H  = 4;
  EC_SECT283K1_X  = '0503213F78CA44883F1A3B8162F188E553CD265F23C1567A16876913B0C2AC2458492836';
  EC_SECT283K1_Y  = '01CCDA380F1C9E318D90F95D07E5426FE87E45C0E8184698E45962364E34116177DD2259';
  { SECT283R1 }
  EC_SECT283R1_K1 = 5;
  EC_SECT283R1_K2 = 7;
  EC_SECT283R1_K3 = 12;
  EC_SECT283R1_A  = '01';
  EC_SECT283R1_B  = '027B680AC8B8596DA5A4AF8A19A0303FCA97FD7645309FA2A581485AF6263E313B79A2F5';
  EC_SECT283R1_N  = '03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF90399660FC938A90165B042A7CEFADB307';
  EC_SECT283R1_H  = 2;
  EC_SECT283R1_X  = '05F939258DB7DD90E1934F8C70B0DFEC2EED25B8557EAC9C80E2E198F8CDBECD86B12053';
  EC_SECT283R1_Y  = '03676854FE24141CB98FE6D4B20D02B4516FF702350EDDB0826779C813F0DF45BE8112F4';
  EC_SECT283R1_S  = '77E2B07370EB0F832A6DD5B62DFC88CD06BB84BE';
  { SECT409K1 }
  EC_SECT409K1_K  = 87;
  EC_SECT409K1_A  = '00';
  EC_SECT409K1_B  = '01';
  EC_SECT409K1_N  = '007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5F83B2D4EA20400EC4557D5ED3E3E7CA5B4B5C83B8E01E5FCF';
  EC_SECT409K1_H  = 4;
  EC_SECT409K1_X  = '0060F05F658F49C1AD3AB1890F7184210EFD0987E307C84C27ACCFB8F9F67CC2C460189EB5AAAA62EE222EB1B35540CFE9023746';
  EC_SECT409K1_Y  = '01E369050B7C4E42ACBA1DACBF04299C3460782F918EA427E6325165E9EA10E3DA5F6C42E9C55215AA9CA27A5863EC48D8E0286B';
  { SECT409R1 }
  EC_SECT409R1_K  = 87;
  EC_SECT409R1_A  = '01';
  EC_SECT409R1_B  = '0021A5C2C8EE9FEB5C4B9A753B7B476B7FD6422EF1F3DD674761FA99D6AC27C8A9A197B272822F6CD57A55AA4F50AE317B13545F';
  EC_SECT409R1_N  = '010000000000000000000000000000000000000000000000000001E2AAD6A612F33307BE5FA47C3C9E052F838164CD37D9A21173';
  EC_SECT409R1_H  = 2;
  EC_SECT409R1_X  = '015D4860D088DDB3496B0C6064756260441CDE4AF1771D4DB01FFE5B34E59703DC255A868A1180515603AEAB60794E54BB7996A7';
  EC_SECT409R1_Y  = '0061B1CFAB6BE5F32BBFA78324ED106A7636B9C5A7BD198D0158AA4F5488D08F38514F1FDF4B4F40D2181B3681C364BA0273C706';
  EC_SECT409R1_S  = '4099B5A457F9D69F79213D094C4BCD4D4262210B';
  { SECT571K1 }
  EC_SECT571K1_K1 = 2;
  EC_SECT571K1_K2 = 5;
  EC_SECT571K1_K3 = 10;
  EC_SECT571K1_A  = '00';
  EC_SECT571K1_B  = '01';
  EC_SECT571K1_N  = '020000000000000000000000000000000000000000000000000000000000000000000000131850E1F19A63E4B391A8DB917F4138B630D84BE5D639381E91DEB45CFE778F637C1001';
  EC_SECT571K1_H  = 4;
  EC_SECT571K1_X  = '026EB7A859923FBC82189631F8103FE4AC9CA2970012D5D46024804801841CA44370958493B205E647DA304DB4CEB08CBBD1BA39494776FB988B47174DCA88C7E2945283A01C8972';
  EC_SECT571K1_Y  = '0349DC807F4FBF374F4AEADE3BCA95314DD58CEC9F307A54FFC61EFC006D8A2C9D4979C0AC44AEA74FBEBBB9F772AEDCB620B01A7BA7AF1B320430C8591984F601CD4C143EF1C7A3';
  { SECT571R1 }
  EC_SECT571R1_K1  = 2;
  EC_SECT571R1_K2  = 5;
  EC_SECT571R1_K3  = 10;
  EC_SECT571R1_A  = '01';
  EC_SECT571R1_B  = '02F40E7E2221F295DE297117B7F3D62F5C6A97FFCB8CEFF1CD6BA8CE4A9A18AD84FFABBD8EFA59332BE7AD6756A66E294AFD185A78FF12AA520E4DE739BACA0C7FFEFF7F2955727A';
  EC_SECT571R1_N  = '03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE661CE18FF55987308059B186823851EC7DD9CA1161DE93D5174D66E8382E9BB2FE84E47';
  EC_SECT571R1_H  = 2;
  EC_SECT571R1_X  = '0303001D34B856296C16C0D40D3CD7750A93D1D2955FA80AA5F40FC8DB7B2ABDBDE53950F4C0D293CDD711A35B67FB1499AE60038614F1394ABFA3B4C850D927E1E7769C8EEC2D19';
  EC_SECT571R1_Y  = '037BF27342DA639B6DCCFFFEB73D69D78C6C27A6009CBBCA1980F8533921E8A684423E43BAB08A576291AF8F461BB2A8B3531D2F0485C19B16E2F1516E23DD3C1A4827AF1B8AC15B';
  EC_SECT571R1_S  = '2AA058F73A0E33AB486B0F610410C53A7F132310';

  { GOST 34.11 2001 curves }
  { TEST paramset }
  EC_GOST_CP_TEST_A = '07';
  EC_GOST_CP_TEST_B = '5FBFF498AA938CE739B8E022FBAFEF40563F6E6A3472FC2A514C0CE9DAE23B7E';
  EC_GOST_CP_TEST_P = '8000000000000000000000000000000000000000000000000000000000000431';
  EC_GOST_CP_TEST_Q = '8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3';
  EC_GOST_CP_TEST_X = '0000000000000000000000000000000000000000000000000000000000000002';
  EC_GOST_CP_TEST_Y = '08E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8';

  { A paramset }
  EC_GOST_CP_A_A = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD94';
  EC_GOST_CP_A_B = 'A6';
  EC_GOST_CP_A_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97';
  EC_GOST_CP_A_Q = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C611070995AD10045841B09B761B893';
  EC_GOST_CP_A_X = '0000000000000000000000000000000000000000000000000000000000000001';
  EC_GOST_CP_A_Y = '8D91E471E0989CDA27DF505A453F2B7635294F2DDF23E3B122ACC99C9E9F1E14';

  { B paramset }
  EC_GOST_CP_B_A = '8000000000000000000000000000000000000000000000000000000000000C96';
  EC_GOST_CP_B_B = '3E1AF419A269A5F866A7D3C25C3DF80AE979259373FF2B182F49D4CE7E1BBC8B';
  EC_GOST_CP_B_P = '8000000000000000000000000000000000000000000000000000000000000C99';
  EC_GOST_CP_B_Q = '800000000000000000000000000000015F700CFFF1A624E5E497161BCC8A198F';
  EC_GOST_CP_B_X = '0000000000000000000000000000000000000000000000000000000000000001';
  EC_GOST_CP_B_Y = '3FA8124359F96680B83D1C3EB2C070E5C545C9858D03ECFB744BF8D717717EFC';

  { C paramset }
  EC_GOST_CP_C_A = '9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D7598';
  EC_GOST_CP_C_B = '805A';
  EC_GOST_CP_C_P = '9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D759B';
  EC_GOST_CP_C_Q = '9B9F605F5A858107AB1EC85E6B41C8AA582CA3511EDDFB74F02F3A6598980BB9';
  EC_GOST_CP_C_X = '0000000000000000000000000000000000000000000000000000000000000000';
  EC_GOST_CP_C_Y = '41ECE55743711A8C3CBF3783CD08C0EE4D4DC440D4641A8F366E550DFDB3BB67';

  { XchA paramset - the same as A }
  EC_GOST_CP_XCHA_A = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD94';
  EC_GOST_CP_XCHA_B = 'A6';
  EC_GOST_CP_XCHA_P = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97';
  EC_GOST_CP_XCHA_Q = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C611070995AD10045841B09B761B893';
  EC_GOST_CP_XCHA_X = '0000000000000000000000000000000000000000000000000000000000000001';
  EC_GOST_CP_XCHA_Y = '8D91E471E0989CDA27DF505A453F2B7635294F2DDF23E3B122ACC99C9E9F1E14';

  { XchB paramset - the same as C }
  EC_GOST_CP_XCHB_A = '9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D7598';
  EC_GOST_CP_XCHB_B = '805A';
  EC_GOST_CP_XCHB_P = '9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D759B';
  EC_GOST_CP_XCHB_Q = '9B9F605F5A858107AB1EC85E6B41C8AA582CA3511EDDFB74F02F3A6598980BB9';
  EC_GOST_CP_XCHB_X = '0000000000000000000000000000000000000000000000000000000000000000';
  EC_GOST_CP_XCHB_Y = '41ECE55743711A8C3CBF3783CD08C0EE4D4DC440D4641A8F366E550DFDB3BB67';


function GetCurveByOID(const OID : ByteArray) : integer;
begin
  { x9.62 curves }
  if CompareContent(OID, SB_OID_EC_C2PNB163V1) then
    Result := SB_EC_C2PNB163V1
  else if CompareContent(OID, SB_OID_EC_C2PNB163V2) then
    Result := SB_EC_C2PNB163V2
  else if CompareContent(OID, SB_OID_EC_C2PNB163V3) then
    Result := SB_EC_C2PNB163V3
  else if CompareContent(OID, SB_OID_EC_C2PNB176W1) then
    Result := SB_EC_C2PNB176W1
  else if CompareContent(OID, SB_OID_EC_C2TNB191V1) then
    Result := SB_EC_C2TNB191V1
  else if CompareContent(OID, SB_OID_EC_C2TNB191V2) then
    Result := SB_EC_C2TNB191V2
  else if CompareContent(OID, SB_OID_EC_C2TNB191V3) then
    Result := SB_EC_C2TNB191V3
  else if CompareContent(OID, SB_OID_EC_C2ONB191V4) then
    Result := SB_EC_C2ONB191V4
  else if CompareContent(OID, SB_OID_EC_C2ONB191V5) then
    Result := SB_EC_C2ONB191V5
  else if CompareContent(OID, SB_OID_EC_C2PNB208W1) then
    Result := SB_EC_C2PNB208W1
  else if CompareContent(OID, SB_OID_EC_C2TNB239V1) then
    Result := SB_EC_C2TNB239V1
  else if CompareContent(OID, SB_OID_EC_C2TNB239V2) then
    Result := SB_EC_C2TNB239V2
  else if CompareContent(OID, SB_OID_EC_C2TNB239V3) then
    Result := SB_EC_C2TNB239V3
  else if CompareContent(OID, SB_OID_EC_C2ONB239V4) then
    Result := SB_EC_C2ONB239V4
  else if CompareContent(OID, SB_OID_EC_C2ONB239V5) then
    Result := SB_EC_C2ONB239V5
  else if CompareContent(OID, SB_OID_EC_C2PNB272W1) then
    Result := SB_EC_C2PNB272W1
  else if CompareContent(OID, SB_OID_EC_C2PNB304W1) then
    Result := SB_EC_C2PNB304W1
  else if CompareContent(OID, SB_OID_EC_C2TNB359V1) then
    Result := SB_EC_C2TNB359V1
  else if CompareContent(OID, SB_OID_EC_C2PNB368W1) then
    Result := SB_EC_C2PNB368W1
  else if CompareContent(OID, SB_OID_EC_C2TNB431R1) then
    Result := SB_EC_C2TNB431R1
  else if CompareContent(OID, SB_OID_EC_PRIME192V1) then
    Result := SB_EC_PRIME192V1
  else if CompareContent(OID, SB_OID_EC_PRIME192V2) then
    Result := SB_EC_PRIME192V2
  else if CompareContent(OID, SB_OID_EC_PRIME192V3) then
    Result := SB_EC_PRIME192V3
  else if CompareContent(OID, SB_OID_EC_PRIME239V1) then
    Result := SB_EC_PRIME239V1
  else if CompareContent(OID, SB_OID_EC_PRIME239V2) then
    Result := SB_EC_PRIME239V2
  else if CompareContent(OID, SB_OID_EC_PRIME239V3) then
    Result := SB_EC_PRIME239V3
  else if CompareContent(OID, SB_OID_EC_PRIME256V1) then
    Result := SB_EC_PRIME256V1
  { SEC2 recommended curves }
  else if CompareContent(OID, SB_OID_EC_SECP112R1) then
    Result := SB_EC_SECP112R1
  else if CompareContent(OID, SB_OID_EC_SECP112R2) then
    Result := SB_EC_SECP112R2
  else if CompareContent(OID, SB_OID_EC_SECP128R1) then
    Result := SB_EC_SECP128R1
  else if CompareContent(OID, SB_OID_EC_SECP128R2) then
    Result := SB_EC_SECP128R2
  else if CompareContent(OID, SB_OID_EC_SECP160K1) then
    Result := SB_EC_SECP160K1
  else if CompareContent(OID, SB_OID_EC_SECP160R1) then
    Result := SB_EC_SECP160R1
  else if CompareContent(OID, SB_OID_EC_SECP160R2) then
    Result := SB_EC_SECP160R2
  else if CompareContent(OID, SB_OID_EC_SECP192R1) then
    Result := SB_EC_SECP192R1
  else if CompareContent(OID, SB_OID_EC_SECP192K1) then
    Result := SB_EC_SECP192K1
  else if CompareContent(OID, SB_OID_EC_SECP224K1) then
    Result := SB_EC_SECP224K1
  else if CompareContent(OID, SB_OID_EC_SECP224R1) then
    Result := SB_EC_SECP224R1
  else if CompareContent(OID, SB_OID_EC_SECP256R1) then
    Result := SB_EC_SECP256R1
  else if CompareContent(OID, SB_OID_EC_SECP256K1) then
    Result := SB_EC_SECP256K1
  else if CompareContent(OID, SB_OID_EC_SECP384R1) then
    Result := SB_EC_SECP384R1
  else if CompareContent(OID, SB_OID_EC_SECP521R1) then
    Result := SB_EC_SECP521R1
  else if CompareContent(OID, SB_OID_EC_SECT113R1) then
    Result := SB_EC_SECT113R1
  else if CompareContent(OID, SB_OID_EC_SECT113R2) then
    Result := SB_EC_SECT113R2
  else if CompareContent(OID, SB_OID_EC_SECT131R1) then
    Result := SB_EC_SECT131R1
  else if CompareContent(OID, SB_OID_EC_SECT131R2) then
    Result := SB_EC_SECT131R2
  else if CompareContent(OID, SB_OID_EC_SECT163K1) then
    Result := SB_EC_SECT163K1
  else if CompareContent(OID, SB_OID_EC_SECT163R1) then
    Result := SB_EC_SECT163R1
  else if CompareContent(OID, SB_OID_EC_SECT163R2) then
    Result := SB_EC_SECT163R2
  else if CompareContent(OID, SB_OID_EC_SECT193R1) then
    Result := SB_EC_SECT193R1
  else if CompareContent(OID, SB_OID_EC_SECT193R2) then
    Result := SB_EC_SECT193R2
  else if CompareContent(OID, SB_OID_EC_SECT233K1) then
    Result := SB_EC_SECT233K1
  else if CompareContent(OID, SB_OID_EC_SECT233R1) then
    Result := SB_EC_SECT233R1
  else if CompareContent(OID, SB_OID_EC_SECT239K1) then
    Result := SB_EC_SECT239K1
  else if CompareContent(OID, SB_OID_EC_SECT283K1) then
    Result := SB_EC_SECT283K1
  else if CompareContent(OID, SB_OID_EC_SECT283R1) then
    Result := SB_EC_SECT283R1
  else if CompareContent(OID, SB_OID_EC_SECT409K1) then
    Result := SB_EC_SECT409K1
  else if CompareContent(OID, SB_OID_EC_SECT409R1) then
    Result := SB_EC_SECT409R1
  else if CompareContent(OID, SB_OID_EC_SECT571K1) then
    Result := SB_EC_SECT571K1
  else if CompareContent(OID, SB_OID_EC_SECT571R1) then
    Result := SB_EC_SECT571R1
  { GOST 34.11-2001 curves }
  else if CompareContent(OID, SB_OID_EC_GOST_CP_TEST) then
    Result := SB_EC_GOST_CP_TEST
  else if CompareContent(OID, SB_OID_EC_GOST_CP_A) then
    Result := SB_EC_GOST_CP_A
  else if CompareContent(OID, SB_OID_EC_GOST_CP_B) then
    Result := SB_EC_GOST_CP_B
  else if CompareContent(OID, SB_OID_EC_GOST_CP_C) then
    Result := SB_EC_GOST_CP_C
  else if CompareContent(OID, SB_OID_EC_GOST_CP_XCHA) then
    Result := SB_EC_GOST_CP_XCHA
  else if CompareContent(OID, SB_OID_EC_GOST_CP_XCHB) then
    Result := SB_EC_GOST_CP_XCHB
  else
    Result := SB_EC_CUSTOM;
end;

function GetOIDByCurve(Curve : integer) : ByteArray;
begin
  Result := EmptyArray;
  case Curve of
    { SEC2 recommended curves over a prime field }
    SB_EC_SECP112R1 : Result := SB_OID_EC_SECP112R1;
    SB_EC_SECP112R2 : Result := SB_OID_EC_SECP112R2;
    SB_EC_SECP128R1 : Result := SB_OID_EC_SECP128R1;
    SB_EC_SECP128R2 : Result := SB_OID_EC_SECP128R2;
    SB_EC_SECP160K1 : Result := SB_OID_EC_SECP160K1;
    SB_EC_SECP160R1 : Result := SB_OID_EC_SECP160R1;
    SB_EC_SECP160R2 : Result := SB_OID_EC_SECP160R2;
    SB_EC_SECP192K1 : Result := SB_OID_EC_SECP192K1;
    SB_EC_SECP192R1 : Result := SB_OID_EC_SECP192R1;
    SB_EC_SECP224K1 : Result := SB_OID_EC_SECP224K1;
    SB_EC_SECP224R1 : Result := SB_OID_EC_SECP224R1;
    SB_EC_SECP256K1 : Result := SB_OID_EC_SECP256K1;
    SB_EC_SECP256R1 : Result := SB_OID_EC_SECP256R1;
    SB_EC_SECP384R1 : Result := SB_OID_EC_SECP384R1;
    SB_EC_SECP521R1 : Result := SB_OID_EC_SECP521R1;
    { SEC2 recommended curves over an extended binary field }
    SB_EC_SECT113R1 : Result := SB_OID_EC_SECT113R1;
    SB_EC_SECT113R2 : Result := SB_OID_EC_SECT113R2;
    SB_EC_SECT131R1 : Result := SB_OID_EC_SECT131R1;
    SB_EC_SECT131R2 : Result := SB_OID_EC_SECT131R2;
    SB_EC_SECT163K1 : Result := SB_OID_EC_SECT163K1;
    SB_EC_SECT163R1 : Result := SB_OID_EC_SECT163R1;
    SB_EC_SECT163R2 : Result := SB_OID_EC_SECT163R2;
    SB_EC_SECT193R1 : Result := SB_OID_EC_SECT193R1;
    SB_EC_SECT193R2 : Result := SB_OID_EC_SECT193R2;
    SB_EC_SECT233K1 : Result := SB_OID_EC_SECT233K1;
    SB_EC_SECT233R1 : Result := SB_OID_EC_SECT233R1;
    SB_EC_SECT239K1 : Result := SB_OID_EC_SECT239K1;
    SB_EC_SECT283K1 : Result := SB_OID_EC_SECT283K1;
    SB_EC_SECT283R1 : Result := SB_OID_EC_SECT283R1;
    SB_EC_SECT409K1 : Result := SB_OID_EC_SECT409K1;
    SB_EC_SECT409R1 : Result := SB_OID_EC_SECT409R1;
    SB_EC_SECT571K1 : Result := SB_OID_EC_SECT571K1;
    SB_EC_SECT571R1 : Result := SB_OID_EC_SECT571R1;
    { X9.62 recommended curves }
    { prime field }
    //SB_EC_PRIME192V1 = SB_EC_SECP192R1;
    SB_EC_PRIME192V2 : Result := SB_OID_EC_PRIME192V2;
    SB_EC_PRIME192V3 : Result := SB_OID_EC_PRIME192V3;
    SB_EC_PRIME239V1 : Result := SB_OID_EC_PRIME239V1;
    SB_EC_PRIME239V2 : Result := SB_OID_EC_PRIME239V2;
    SB_EC_PRIME239V3 : Result := SB_OID_EC_PRIME239V3;
    //SB_EC_PRIME256V1 = SB_EC_SECP256R1;
    { binary extended field }
    SB_EC_C2PNB163V1 : Result := SB_OID_EC_C2PNB163V1;
    SB_EC_C2PNB163V2 : Result := SB_OID_EC_C2PNB163V2;
    SB_EC_C2PNB163V3 : Result := SB_OID_EC_C2PNB163V3;
    SB_EC_C2PNB176W1 : Result := SB_OID_EC_C2PNB176W1;
    SB_EC_C2TNB191V1 : Result := SB_OID_EC_C2TNB191V1;
    SB_EC_C2TNB191V2 : Result := SB_OID_EC_C2TNB191V2;
    SB_EC_C2TNB191V3 : Result := SB_OID_EC_C2TNB191V3;
    SB_EC_C2ONB191V4 : Result := SB_OID_EC_C2ONB191V4;
    SB_EC_C2ONB191V5 : Result := SB_OID_EC_C2ONB191V5;
    SB_EC_C2PNB208W1 : Result := SB_OID_EC_C2PNB208W1;
    SB_EC_C2TNB239V1 : Result := SB_OID_EC_C2TNB239V1;
    SB_EC_C2TNB239V2 : Result := SB_OID_EC_C2TNB239V2;
    SB_EC_C2TNB239V3 : Result := SB_OID_EC_C2TNB239V3;
    SB_EC_C2ONB239V4 : Result := SB_OID_EC_C2ONB239V4;
    SB_EC_C2ONB239V5 : Result := SB_OID_EC_C2ONB239V5;
    SB_EC_C2PNB272W1 : Result := SB_OID_EC_C2PNB272W1;
    SB_EC_C2PNB304W1 : Result := SB_OID_EC_C2PNB304W1;
    SB_EC_C2TNB359V1 : Result := SB_OID_EC_C2TNB359V1;
    SB_EC_C2PNB368W1 : Result := SB_OID_EC_C2PNB368W1;
    SB_EC_C2TNB431R1 : Result := SB_OID_EC_C2TNB431R1;
    { GOST 34.11-2001 curves }
    SB_EC_GOST_CP_TEST  : Result := SB_OID_EC_GOST_CP_TEST;
    SB_EC_GOST_CP_A     : Result := SB_OID_EC_GOST_CP_A;
    SB_EC_GOST_CP_B     : Result := SB_OID_EC_GOST_CP_B;
    SB_EC_GOST_CP_C     : Result := SB_OID_EC_GOST_CP_C;
    SB_EC_GOST_CP_XCHA  : Result := SB_OID_EC_GOST_CP_XCHA;
    SB_EC_GOST_CP_XCHB  : Result := SB_OID_EC_GOST_CP_XCHB
  else
    Result := EmptyArray;
  end;
end;

function IsPointCompressed(Buffer : pointer; Size : integer) : boolean;
begin
  Result := (Size > 0) and ((PByteArray(Buffer)^[0] = 4) or (PByteArray(Buffer)^[0] = 5));
end;

function PointToBuffer(X : pointer; XSize : integer; Y : pointer; YSize : integer;
  DomainParams : TElECDomainParameters; Buffer : pointer; var Size : integer;
  Compress, Hybrid : boolean) : boolean;
var
  i, yp, EstSize, FldSize : integer;
  LX, LY, LP : PLInt;
begin
  Result := false;

  if DomainParams.FieldType = SB_EC_FLD_TYPE_FP then
    FldSize := Length(DomainParams.P)
  else
    FldSize := (DomainParams.M + 7) shr 3;


  if (XSize <= 0) or (YSize <= 0) or (XSize > FldSize) or (YSize > FldSize) then
    raise EElECError.Create(SInvalidPoint);

  if Compress and (not Assigned(DomainParams)) then
    raise EElECError.Create(SInvalidDomainParameters);

  if (not Compress) or Hybrid  then
    EstSize := 1 + FldSize shl 1
  else
    EstSize := 1 + FldSize;

  if Size < EstSize then
  begin
    Size := EstSize;
    Exit;
  end;

  if Compress then
  begin
    if DomainParams.FieldType = SB_EC_FLD_TYPE_FP then
    begin
      yp := PByteArray(Y)^[YSize - 1] and 1;
    end
    else if DomainParams.FieldType = SB_EC_FLD_TYPE_F2MP then
    begin
      LCreate(LX);
      LCreate(LY);
      LCreate(LP);

      try
        PointerToLInt(LX, X, XSize);
        PointerToLInt(LY, Y, YSize);
        PointerToLInt(LP, DomainParams.P, Length(DomainParams.P));

        yp := SBECMath.ECPF2mPGetYpBit(LX, LY, LP, DomainParams.Field);
      finally
        LDestroy(LX);
        LDestroy(LY);
        LDestroy(LP);
      end;
    end
    else
    begin
      Size := 0;
      Exit;
    end;
  end
  else
    yp := 0;

  if not Compress then
    yp := 4
  else if not Hybrid then
    yp := yp + 2
  else
    yp := yp + 6;

  PByteArray(Buffer)^[0] := yp;
  for i := 1 to FldSize - XSize do
    PByteArray(Buffer)^[i] := 0;
  SBMove(X^, PByteArray(Buffer)^[1 + FldSize - XSize], XSize);
  if (not Compress) or (Hybrid) then
  begin
    for i := 1 to FldSize - YSize do
      PByteArray(Buffer)^[FldSize + i] := 0;
    SBMove(Y^, PByteArray(Buffer)^[1 + FldSize shl 1 - YSize], YSize);
  end;

  Size := EstSize;
  Result := true;
end;

function BufferToPoint(Buffer : pointer; Size : integer;
  DomainParams : TElECDomainParameters; X : pointer;
  var XSize : integer; Y : pointer; var YSize : integer) : boolean;
var
  FldSize, CSize : integer;
  PC : byte;
  XArr: ByteArray;
  LX, LY, LA, LB, LP : PLInt;
begin
  Result := false;

  if DomainParams.FieldType = SB_EC_FLD_TYPE_FP then
    FldSize := Length(DomainParams.P)
  else
    FldSize := (DomainParams.M + 7) shr 3;

  if (XSize < FldSize) or (YSize < FldSize) then
  begin
    XSize := FldSize;
    YSize := FldSize;
    Exit;
  end;


  if (Size < 1) then
  begin
    XSize := 0;
    YSize := 0;
    Exit;
  end;

  PC :=  PByteArray(Buffer)^[0] ;

  if PC = 0 then // point on infinity
  begin
    XSize := 0;
    YSize := 0;
    Result := true;
    Exit;
  end;

  if (PC = 4) or (PC = 6) or (PC = 7) then //uncompressed or hybrid point
  begin
    if ((Size and 1) <> 1) then
    begin
      XSize := 0;
      YSize := 0;
      Exit;
    end;

    CSize := (Size - 1) shr 1;
    if CSize <> FldSize then
    begin
      XSize := 0;
      YSize := 0;
      Exit;
    end;

    XSize := FldSize;
    YSize := FldSize;

    SBMove(PByteArray(Buffer)^[1], X^, FldSize);
    SBMove(PByteArray(Buffer)^[1 + FldSize], Y^, FldSize);

    Result := true;
  end
  else if (PC = 2) or (PC = 3) then //compressed point
  begin
    CSize := Size - 1;

    if (CSize <> FldSize) then
    begin
      XSize := 0;
      YSize := 0;
      Exit;
    end;

    if DomainParams.FieldType = SB_EC_FLD_TYPE_FP then
    begin
      LCreate(LP);
      LCreate(LX);
      LCreate(LY);
      LCreate(LA);
      LCreate(LB);

      try
        BufferToFieldElement(DomainParams.P, LP, nil);
        BufferToFieldElement(DomainParams.A, LA, LP);
        BufferToFieldElement(DomainParams.B, LB, LP);
        SetLength(XArr, CSize);
        SBMove(PByteArray(Buffer)^[1], XArr[0], FldSize);
        BufferToFieldElement(XArr, LX, LP);

        if SBECMath.ECPFpDecompress(PC - 2, LX, LA, LB, LP, LY, DomainParams.Field) then
        begin
          LIntToPointerTrunc(LY, Y, YSize);
          SBMove(XArr[0], X^, FldSize);
          XSize := FldSize;
          Result := true;
          Exit;
        end
        else
        begin
          XSize := 0;
          YSize := 0;
          Exit;
        end;

      finally
        LDestroy(LB);
        LDestroy(LA);
        LDestroy(LY);
        LDestroy(LX);
        LDestroy(LP);
      end;
    end
    else if DomainParams.FieldType = SB_EC_FLD_TYPE_F2MP then
    begin
      LCreate(LP);
      LCreate(LX);
      LCreate(LY);
      LCreate(LA);
      LCreate(LB);

      try
        BufferToFieldElement(DomainParams.P, LP, nil);
        BufferToFieldElement(DomainParams.A, LA, LP);
        BufferToFieldElement(DomainParams.B, LB, LP);
        SetLength(XArr, FldSize);
        SBMove(PByteArray(Buffer)^[1], XArr[0], FldSize);
        BufferToFieldElement(XArr, LX, LP);

        if SBECMath.ECPF2mPDecompress(PC - 2, LX, LA, LB, LP, LY, DomainParams.Field) then
        begin
          LIntToPointerTrunc(LY, Y, YSize);
          SBMove(XArr[0], X^, FldSize);
          XSize := FldSize;
          Result := true;
          Exit;
        end
        else
        begin
          XSize := 0;
          YSize := 0;
          Exit;
        end;

      finally
        LDestroy(LB);
        LDestroy(LA);
        LDestroy(LY);
        LDestroy(LX);
        LDestroy(LP);
      end;
    end
    else
    begin
      XSize := 0;
      YSize := 0;
    end;  
  end
  else
  begin
    XSize := 0;
    YSize := 0;
  end;
end;

function ValidateKey(DomainParams : TElECDomainParameters;
  D : pointer ; DSize : integer; Qx : pointer; QxSize : integer;
  Qy : pointer; QySize : integer) : boolean;
var
  LA, LB, LP, LX, LY, LX1, LY1, LN, LD, LQX, LQY : PLInt;
begin

  if (DSize = 0) and ((QXSize = 0) or (QYSize = 0)) then
  begin
    Result := false;
    Exit;
  end;

  Result := true;
  LCreate(LA);
  LCreate(LB);
  LCreate(LP);
  LCreate(LX);
  LCreate(LY);
  LCreate(LX1);
  LCreate(LY1);
  LCreate(LN);
  LCreate(LD);
  LCreate(LQX);
  LCreate(LQY);

  try
    PointerToLInt(LP,  @DomainParams.P[0], Length(DomainParams.P) );
    PointerToLInt(LN,  @DomainParams.N[0], Length(DomainParams.N) );
    BufferToFieldElement(DomainParams.A, LA, LP);
    BufferToFieldElement(DomainParams.B, LB, LP);
    BufferToFieldElement(DomainParams.X, LX, LP);
    BufferToFieldElement(DomainParams.Y, LY, LP);
    if (QxSize > 0) then
      BufferToFieldElement(Qx,  QxSize,  LQX, LP);
    if (QySize > 0) then
      BufferToFieldElement(Qy,  QySize,  LQY, LP);
    if (DSize > 0) then
      PointerToLInt(LD, D, DSize);
      
    { checking public-key part }
    if (QxSize > 0) and (QySize > 0) then
    begin
      { checking if Qx and Qy are underlying field elements }
      if DomainParams.FieldType = SB_EC_FLD_TYPE_FP then
        Result := (FpCmp(LQX, LP, LP) = -1) and (FpCmp(LQY, LP, LP) = -1)
      else
        Result := (F2mPCmp(LQX, LP, LP) = -1) and (F2mPCmp(LQY, LP, LP) = -1);
      if not Result then Exit;

      { checking if (Qx, Qy) is a point on curve }
      if DomainParams.FieldType = SB_EC_FLD_TYPE_FP then
        Result := ECPFpPointOnCurve(LQX, LQY, LA, LB, LP, DomainParams.Field)
      else
        Result := ECPF2mPPointOnCurve(LQX, LQY, LA, LB, LP, DomainParams.Field);
      if not Result then Exit;
    end;

    if DSize > 0 then
    begin
      { checking if D is lower than N }
      Result := LGreater(LN, LD);
      if not Result then
        Exit;

      if (QxSize > 0) and (QySize > 0) then
      begin
        { checking if (Qx, Qy) is a D'th power of (X, Y) }
        if DomainParams.FieldType = SB_EC_FLD_TYPE_FP then
        begin
          ECPFpExpJA(LX, LY, LP, LA, LD, LX1, LY1, DomainParams.Field);
          Result := (FpCmp(LQX, LX1, LP) = 0) and (FpCmp(LQY, LY1, LP) = 0);
        end
        else
        begin
          ECPF2mPExpLDA(LX, LY, LA, LB, LP, LD, LX, LY1, DomainParams.Field);
          Result := (F2mPCmp(LQX, LX1, LP) = 0) and (F2mPCmp(LQY, LY1, LP) = 0);
        end;
      end;
    end;
  finally
    LDestroy(LA);
    LDestroy(LB);
    LDestroy(LP);
    LDestroy(LX);
    LDestroy(LY);
    LDestroy(LX1);
    LDestroy(LY1);
    LDestroy(LN);
    LDestroy(LD);
    LDestroy(LQX);
    LDestroy(LQY);
  end;  
end;

function HexStrToFieldElement(const Src : string; LittleEndian : boolean; PSize : integer) : ByteArray;
var
  i : integer;
  Len : integer;
  TmpStr : string;
//  Res : ByteArray;
begin
  TmpStr := Src;

  if (Length(TmpStr) and 1) <> 0 then
  begin
    if LittleEndian then
      TmpStr := TmpStr + '0'
    else
      TmpStr := '0' + TmpStr;
  end;

  Len := Length(TmpStr) shr 1;
  SetLength(Result, Len);

  if LittleEndian then
    for i := 0 to Len - 1 do
      Result[i] := HexToDecDigit(TmpStr[i shl 1 + StringStartOffset]) + HexToDecDigit(TmpStr[i shl 1 + 1 + StringStartOffset]) shl 4
  else
    for i := 0 to Len - 1 do
      Result[i] := HexToDecDigit(TmpStr[i shl 1 + 1 + StringStartOffset]) + HexToDecDigit(TmpStr[i shl 1 + StringStartOffset]) shl 4;

  if (PSize > Len) then
  begin
    SetLength(Result, PSize);
    if LittleEndian then
      FillChar(Result[Len], PSize - Len, 0)
    else
    begin
      for i := PSize - 1 downto PSize - Len do
        Result[i] := Result[i - (PSize - Len)];
      FillChar(Result[0], PSize - Len, 0);
    end;  
  end;
end;

procedure BufferToFieldElement(const Buf : ByteArray; var A : PLInt; P : PLInt);
var
  i : integer;
begin
  PointerToLInt(A, @Buf[0], Length(Buf));

  if Assigned(P) then
  begin
    for i := A.Length + 1 to P.Length do
      A.Digits[i] := 0;
    A.Length := P.Length;
  end;
end;

procedure BufferToFieldElement(Buf : pointer; Size : integer; var A : PLInt; P : PLInt);
var
  i : integer;
begin
  PointerToLInt(A, Buf, Size);

  if Assigned(P) then
  begin
    for i := A.Length + 1 to P.Length do
      A.Digits[i] := 0;
    A.Length := P.Length;
  end;
end;

{ TElECDomainParameters methods }

constructor TElECDomainParameters.Create;
begin
  inherited;

  Reset;
end;

 destructor  TElECDomainParameters.Destroy;
begin
  inherited;
end;

procedure TElECDomainParameters.SetP(const Value : ByteArray);
var
  LP : PLInt;
begin
  FP := CloneArray(Value);

  if Length(FP) = 0 then
  begin
    FM := 0;
    FK1 := 0;
    FK2 := 0;
    FK3 := 0;
    Exit;
  end;

  LCreate(LP);
  PointerToLInt(LP, @FP[0], Length(FP));

  if FFieldType = SB_EC_FLD_TYPE_F2MP then
    SBECMath.GetBinaryFieldK(LP, FM, FK1, FK2, FK3);
  
  LDestroy(LP);
end;

procedure TElECDomainParameters.UpdateP;
var
  LP : PLInt;
  Sz : integer;
begin
  LCreate(LP);
  try
    SBECMath.SetBinaryFieldK(LP, FM, FK1, FK2, FK3);
    SetLength(FP, LP.Length  shl 2);
    Sz := LP.Length  shl 2;
    LIntToPointerTrunc(LP, @FP[0], Sz);
    SetLength(FP, Sz);
  finally
    LDestroy(LP);
  end;
end;

function TElECDomainParameters.GetSubgroupBits : integer;
begin
  if Length(N) > 0 then
    Result := BufferBitCount( @N[0] , Length(N))
  else
    Result := 0;
end;

function TElECDomainParameters.GetFieldBits : integer;
begin
  if FFieldType = SB_EC_FLD_TYPE_F2MP then
    Result := M
  else
    Result := BufferBitCount(FP, Length(FP));
end;

procedure TElECDomainParameters.SetM(Value : integer);
begin
  FM := Value;
  if FFieldType = SB_EC_FLD_TYPE_F2MP then
    UpdateP;
end;

procedure TElECDomainParameters.SetK1(Value : integer);
begin
  if (Value >= 0) then
  begin
    FK1 := Value;

    if FFieldType = SB_EC_FLD_TYPE_F2MP then
      UpdateP;
  end; 
end;

procedure TElECDomainParameters.SetK2(Value : integer);
begin
  if (Value >= 0) then
  begin
    FK2 := Value;

    if FFieldType = SB_EC_FLD_TYPE_F2MP then
      UpdateP;
  end;
end;

procedure TElECDomainParameters.SetK3(Value : integer);
begin
  if (Value >= 0) then
  begin
    FK3 := Value;

    if FFieldType = SB_EC_FLD_TYPE_F2MP then
      UpdateP;
  end;
end;

procedure TElECDomainParameters.SetField(Value : integer);
begin
  case Value of
    SB_EC_FLD_NIST_P192S :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        P := HexStrToFieldElement(FLD_P192S_P, false, 0);
      end;
    SB_EC_FLD_NIST_P224S :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        P := HexStrToFieldElement(FLD_P224S_P, false, 0);
      end;
    SB_EC_FLD_NIST_P256S :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        P := HexStrToFieldElement(FLD_P256S_P, false, 0);
      end;
    SB_EC_FLD_NIST_P384 :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        P := HexStrToFieldElement(FLD_P384_P, false, 0);
      end;
    SB_EC_FLD_NIST_P521 :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        P := HexStrToFieldElement(FLD_P521_P, false, 0);
      end;
    SB_EC_FLD_NIST_B163 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        P := HexStrToFieldElement(FLD_B163_P, false, 0);
      end;
    SB_EC_FLD_NIST_B233 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        P := HexStrToFieldElement(FLD_B233_P, false, 0);
      end;
    SB_EC_FLD_NIST_B283 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        P := HexStrToFieldElement(FLD_B283_P, false, 0);
      end;
    SB_EC_FLD_NIST_B409 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        P := HexStrToFieldElement(FLD_B409_P, false, 0);
      end;
    SB_EC_FLD_NIST_B571 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        P := HexStrToFieldElement(FLD_B571_P, false, 0);
      end;
    SB_EC_FLD_CUSTOM : ;
  else
    raise EElECError.Create(SUnknownCurve);
  end;

  FField := Value;
end;

procedure TElECDomainParameters.SetupCurveParameters(Curve : integer);
begin
  case Curve of
    { SEC2 recommended curves over a prime field }
    SB_EC_CUSTOM :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_UNKNOWN;
        SetLength(FP, 0);
      end;
    SB_EC_SECP112R1 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P112_P, false, 0);
        A := HexStrToFieldElement(EC_SECP112R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP112R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP112R1_N, false, 0);
        H := EC_SECP112R1_H;
        X := HexStrToFieldElement(EC_SECP112R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP112R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP112R1_S, false, 0);
      end;
    SB_EC_SECP112R2 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P112_P, false, 0);
        A := HexStrToFieldElement(EC_SECP112R2_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP112R2_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP112R2_N, false, 0);
        H := EC_SECP112R2_H;
        X := HexStrToFieldElement(EC_SECP112R2_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP112R2_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP112R2_S, false, 0);
      end;
    SB_EC_SECP128R1 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P128_P, false, 0);
        A := HexStrToFieldElement(EC_SECP128R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP128R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP128R1_N, false, 0);
        H := EC_SECP128R1_H;
        X := HexStrToFieldElement(EC_SECP128R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP128R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP128R1_S, false, 0);
      end;
    SB_EC_SECP128R2 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P128_P, false, 0);
        A := HexStrToFieldElement(EC_SECP128R2_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP128R2_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP128R2_N, false, 0);
        H := EC_SECP128R2_H;
        X := HexStrToFieldElement(EC_SECP128R2_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP128R2_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP128R2_S, false, 0);
      end;
    SB_EC_SECP160K1 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P160L_P, false, 0);
        A := HexStrToFieldElement(EC_SECP160K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP160K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP160K1_N, false, 0);
        H := EC_SECP160K1_H;
        X := HexStrToFieldElement(EC_SECP160K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP160K1_Y, false, Length(FP));
      end;
    SB_EC_SECP160R1 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P160S_P, false, 0);
        A := HexStrToFieldElement(EC_SECP160R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP160R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP160R1_N, false, 0);
        H := EC_SECP160R1_H;
        X := HexStrToFieldElement(EC_SECP160R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP160R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP160R1_S, false, 0);
      end;    
    SB_EC_SECP160R2 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P160L_P, false, 0);
        A := HexStrToFieldElement(EC_SECP160R2_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP160R2_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP160R2_N, false, 0);
        H := EC_SECP160R2_H;
        X := HexStrToFieldElement(EC_SECP160R2_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP160R2_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP160R2_S, false, 0);
      end;
    SB_EC_SECP192K1 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P192L_P, false, 0);
        A := HexStrToFieldElement(EC_SECP192K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP192K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP192K1_N, false, 0);
        H := EC_SECP192K1_H;
        X := HexStrToFieldElement(EC_SECP192K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP192K1_Y, false, Length(FP));
      end;
    SB_EC_SECP192R1 :
      begin
        Field := SB_EC_FLD_NIST_P192S;
        A := HexStrToFieldElement(EC_SECP192R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP192R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP192R1_N, false, 0);
        H := EC_SECP192R1_H;
        X := HexStrToFieldElement(EC_SECP192R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP192R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP192R1_S, false, 0);
      end;
    SB_EC_SECP224K1 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P224L_P, false, 0);
        A := HexStrToFieldElement(EC_SECP224K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP224K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP224K1_N, false, 0);
        H := EC_SECP224K1_H;
        X := HexStrToFieldElement(EC_SECP224K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP224K1_Y, false, Length(FP));
      end;
    SB_EC_SECP224R1 :
      begin
        Field := SB_EC_FLD_NIST_P224S;

        A := HexStrToFieldElement(EC_SECP224R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP224R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP224R1_N, false, 0);
        H := EC_SECP224R1_H;
        X := HexStrToFieldElement(EC_SECP224R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP224R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP224R1_S, false, 0);
      end;
    SB_EC_SECP256K1 :
      begin
        Field := SB_EC_FLD_CUSTOM;
        FieldType := SB_EC_FLD_TYPE_FP;

        P := HexStrToFieldElement(FLD_P256L_P, false, 0);
        A := HexStrToFieldElement(EC_SECP256K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP256K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP256K1_N, false, 0);
        H := EC_SECP256K1_H;
        X := HexStrToFieldElement(EC_SECP256K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP256K1_Y, false, Length(FP));
      end;
    SB_EC_SECP256R1 :
      begin
        Field := SB_EC_FLD_NIST_P256S;

        A := HexStrToFieldElement(EC_SECP256R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP256R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP256R1_N, false, 0);
        H := EC_SECP256R1_H;
        X := HexStrToFieldElement(EC_SECP256R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP256R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP256R1_S, false, 0);
      end;
    SB_EC_SECP384R1 :
      begin
        Field := SB_EC_FLD_NIST_P384;

        A := HexStrToFieldElement(EC_SECP384R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP384R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP384R1_N, false, 0);
        H := EC_SECP384R1_H;
        X := HexStrToFieldElement(EC_SECP384R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP384R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP384R1_S, false, 0);
      end;
    SB_EC_SECP521R1 :
      begin
        Field := SB_EC_FLD_NIST_P521;

        A := HexStrToFieldElement(EC_SECP521R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECP521R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECP521R1_N, false, 0);
        H := EC_SECP521R1_H;
        X := HexStrToFieldElement(EC_SECP521R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECP521R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECP521R1_S, false, 0);
      end;
    { SEC2 recommended curves over extended binary field }
    SB_EC_SECT113R1 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        Field := SB_EC_FLD_CUSTOM;

        M := 113;
        K1 := EC_SECT113R1_K;
        K2 := 0;
        K3 := 0;

        A := HexStrToFieldElement(EC_SECT113R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT113R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT113R1_N, false, 0);
        H := EC_SECT113R1_H;
        X := HexStrToFieldElement(EC_SECT113R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT113R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT113R1_S, false, 0);
      end;
    SB_EC_SECT113R2 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        Field := SB_EC_FLD_CUSTOM;

        M := 113;
        K1 := EC_SECT113R2_K;
        K2 := 0;
        K3 := 0;

        A := HexStrToFieldElement(EC_SECT113R2_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT113R2_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT113R2_N, false, 0);
        H := EC_SECT113R2_H;
        X := HexStrToFieldElement(EC_SECT113R2_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT113R2_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT113R2_S, false, 0);
      end;
    SB_EC_SECT131R1 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        Field := SB_EC_FLD_CUSTOM;

        M := 131;
        K1 := EC_SECT131R1_K1;
        K2 := EC_SECT131R1_K2;
        K3 := EC_SECT131R1_K3;

        A := HexStrToFieldElement(EC_SECT131R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT131R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT131R1_N, false, 0);
        H := EC_SECT131R1_H;
        X := HexStrToFieldElement(EC_SECT131R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT131R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT131R1_S, false, 0);
      end;
    SB_EC_SECT131R2 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        Field := SB_EC_FLD_CUSTOM;

        M := 131;
        K1 := EC_SECT131R2_K1;
        K2 := EC_SECT131R2_K2;
        K3 := EC_SECT131R2_K3;

        A := HexStrToFieldElement(EC_SECT131R2_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT131R2_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT131R2_N, false, 0);
        H := EC_SECT131R2_H;
        X := HexStrToFieldElement(EC_SECT131R2_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT131R2_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT131R2_S, false, 0);
      end;
    SB_EC_SECT163K1 :
      begin
        Field := SB_EC_FLD_NIST_B163;
        
        A := HexStrToFieldElement(EC_SECT163K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT163K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT163K1_N, false, 0);
        H := EC_SECT163K1_H;
        X := HexStrToFieldElement(EC_SECT163K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT163K1_Y, false, Length(FP));
      end;
    SB_EC_SECT163R1 :
      begin
        Field := SB_EC_FLD_NIST_B163;

        A := HexStrToFieldElement(EC_SECT163R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT163R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT163R1_N, false, 0);
        H := EC_SECT163R1_H;
        X := HexStrToFieldElement(EC_SECT163R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT163R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT163R1_S, false, 0);
      end;
    SB_EC_SECT163R2 :
      begin
        Field := SB_EC_FLD_NIST_B163;

        A := HexStrToFieldElement(EC_SECT163R2_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT163R2_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT163R2_N, false, 0);
        H := EC_SECT163R2_H;
        X := HexStrToFieldElement(EC_SECT163R2_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT163R2_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT163R2_S, false, 0);
      end;
    SB_EC_SECT193R1 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        Field := SB_EC_FLD_CUSTOM;

        M := 193;
        K1 := EC_SECT193R1_K;
        K2 := 0;
        K3 := 0;

        A := HexStrToFieldElement(EC_SECT193R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT193R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT193R1_N, false, 0);
        H := EC_SECT193R1_H;
        X := HexStrToFieldElement(EC_SECT193R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT193R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT193R1_S, false, 0);
      end;
    SB_EC_SECT193R2 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        Field := SB_EC_FLD_CUSTOM;

        M := 193;
        K1 := EC_SECT193R2_K;
        K2 := 0;
        K3 := 0;

        A := HexStrToFieldElement(EC_SECT193R2_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT193R2_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT193R2_N, false, 0);
        H := EC_SECT193R2_H;
        X := HexStrToFieldElement(EC_SECT193R2_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT193R2_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT193R2_S, false, 0);
      end;
    SB_EC_SECT233K1 :
      begin
        Field := SB_EC_FLD_NIST_B233;
        A := HexStrToFieldElement(EC_SECT233K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT233K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT233K1_N, false, 0);
        H := EC_SECT233K1_H;
        X := HexStrToFieldElement(EC_SECT233K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT233K1_Y, false, Length(FP));
      end;
    SB_EC_SECT233R1 :
      begin
        Field := SB_EC_FLD_NIST_B233;
        A := HexStrToFieldElement(EC_SECT233R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT233R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT233R1_N, false, 0);
        H := EC_SECT233R1_H;
        X := HexStrToFieldElement(EC_SECT233R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT233R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT233R1_S, false, 0);
      end;
    SB_EC_SECT239K1 :
      begin
        FieldType := SB_EC_FLD_TYPE_F2MP;
        Field := SB_EC_FLD_CUSTOM;

        M := 239;
        K1 := EC_SECT239K1_K;
        K2 := 0;
        K3 := 0;

        A := HexStrToFieldElement(EC_SECT239K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT239K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT239K1_N, false, 0);
        H := EC_SECT239K1_H;
        X := HexStrToFieldElement(EC_SECT239K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT239K1_Y, false, Length(FP));
      end;
    SB_EC_SECT283K1 :
      begin
        Field := SB_EC_FLD_NIST_B283;
        A := HexStrToFieldElement(EC_SECT283K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT283K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT283K1_N, false, 0);
        H := EC_SECT283K1_H;
        X := HexStrToFieldElement(EC_SECT283K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT283K1_Y, false, Length(FP));
      end;
    SB_EC_SECT283R1 :
      begin
        Field := SB_EC_FLD_NIST_B283;
        A := HexStrToFieldElement(EC_SECT283R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT283R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT283R1_N, false, 0);
        H := EC_SECT283R1_H;
        X := HexStrToFieldElement(EC_SECT283R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT283R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT283R1_S, false, 0);
      end;
    SB_EC_SECT409K1 :
      begin
        Field := SB_EC_FLD_NIST_B409;
        A := HexStrToFieldElement(EC_SECT409K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT409K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT409K1_N, false, 0);
        H := EC_SECT409K1_H;
        X := HexStrToFieldElement(EC_SECT409K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT409K1_Y, false, Length(FP));
      end;
    SB_EC_SECT409R1 :
      begin
        Field := SB_EC_FLD_NIST_B409;
        A := HexStrToFieldElement(EC_SECT409R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT409R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT409R1_N, false, 0);
        H := EC_SECT409R1_H;
        X := HexStrToFieldElement(EC_SECT409R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT409R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT409R1_S, false, 0);
      end;
    SB_EC_SECT571K1 :
      begin
        Field := SB_EC_FLD_NIST_B571;
        A := HexStrToFieldElement(EC_SECT571K1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT571K1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT571K1_N, false, 0);
        H := EC_SECT571K1_H;
        X := HexStrToFieldElement(EC_SECT571K1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT571K1_Y, false, Length(FP));
      end;
    SB_EC_SECT571R1 :
      begin
        Field := SB_EC_FLD_NIST_B571;
        A := HexStrToFieldElement(EC_SECT571R1_A, false, Length(FP));
        B := HexStrToFieldElement(EC_SECT571R1_B, false, Length(FP));
        N := HexStrToFieldElement(EC_SECT571R1_N, false, 0);
        H := EC_SECT571R1_H;
        X := HexStrToFieldElement(EC_SECT571R1_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_SECT571R1_Y, false, Length(FP));
        Seed := HexStrToFieldElement(EC_SECT571R1_S, false, 0);
      end;

    { GOST 34.11-2001 curves }
    SB_EC_GOST_CP_TEST :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        Field := SB_EC_FLD_CUSTOM;
        P := HexStrToFieldElement(EC_GOST_CP_TEST_P, false, 0);
        A := HexStrToFieldElement(EC_GOST_CP_TEST_A, false, Length(FP));
        B := HexStrToFieldElement(EC_GOST_CP_TEST_B, false, Length(FP));
        N := HexStrToFieldElement(EC_GOST_CP_TEST_Q, false, 0);
        H := 2;
        X := HexStrToFieldElement(EC_GOST_CP_TEST_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_GOST_CP_TEST_Y, false, Length(FP));
      end;
    SB_EC_GOST_CP_A :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        Field := SB_EC_FLD_CUSTOM;
        P := HexStrToFieldElement(EC_GOST_CP_A_P, false, 0);
        A := HexStrToFieldElement(EC_GOST_CP_A_A, false, Length(FP));
        B := HexStrToFieldElement(EC_GOST_CP_A_B, false, Length(FP));
        N := HexStrToFieldElement(EC_GOST_CP_A_Q, false, 0);
        H := 2;
        X := HexStrToFieldElement(EC_GOST_CP_A_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_GOST_CP_A_Y, false, Length(FP));
      end;
    SB_EC_GOST_CP_B :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        Field := SB_EC_FLD_CUSTOM;
        P := HexStrToFieldElement(EC_GOST_CP_B_P, false, 0);
        A := HexStrToFieldElement(EC_GOST_CP_B_A, false, Length(FP));
        B := HexStrToFieldElement(EC_GOST_CP_B_B, false, Length(FP));
        N := HexStrToFieldElement(EC_GOST_CP_B_Q, false, 0);
        H := 2;
        X := HexStrToFieldElement(EC_GOST_CP_B_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_GOST_CP_B_Y, false, Length(FP));
      end;
    SB_EC_GOST_CP_C :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        Field := SB_EC_FLD_CUSTOM;
        P := HexStrToFieldElement(EC_GOST_CP_C_P, false, 0);
        A := HexStrToFieldElement(EC_GOST_CP_C_A, false, Length(FP));
        B := HexStrToFieldElement(EC_GOST_CP_C_B, false, Length(FP));
        N := HexStrToFieldElement(EC_GOST_CP_C_Q, false, 0);
        H := 2;
        X := HexStrToFieldElement(EC_GOST_CP_C_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_GOST_CP_C_Y, false, Length(FP));
      end;
    SB_EC_GOST_CP_XCHA :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        Field := SB_EC_FLD_CUSTOM;
        P := HexStrToFieldElement(EC_GOST_CP_XCHA_P, false, 0);
        A := HexStrToFieldElement(EC_GOST_CP_XCHA_A, false, Length(FP));
        B := HexStrToFieldElement(EC_GOST_CP_XCHA_B, false, Length(FP));
        N := HexStrToFieldElement(EC_GOST_CP_XCHA_Q, false, 0);
        H := 2;
        X := HexStrToFieldElement(EC_GOST_CP_XCHA_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_GOST_CP_XCHA_Y, false, Length(FP));
      end;
    SB_EC_GOST_CP_XCHB :
      begin
        FieldType := SB_EC_FLD_TYPE_FP;
        Field := SB_EC_FLD_CUSTOM;
        P := HexStrToFieldElement(EC_GOST_CP_XCHB_P, false, 0);
        A := HexStrToFieldElement(EC_GOST_CP_XCHB_A, false, Length(FP));
        B := HexStrToFieldElement(EC_GOST_CP_XCHB_B, false, Length(FP));
        N := HexStrToFieldElement(EC_GOST_CP_XCHB_Q, false, 0);
        H := 2;
        X := HexStrToFieldElement(EC_GOST_CP_XCHB_X, false, Length(FP));
        Y := HexStrToFieldElement(EC_GOST_CP_XCHB_Y, false, Length(FP));
      end;
  else
    raise EElECError.Create(SUnknownCurve);
  end;
end;

procedure TElECDomainParameters.SetCurve(Value : integer);
begin
  FCurve := Value;
  FCurveOID := GetOIDByCurve(Value);
  SetupCurveParameters(FCurve);  
end;

procedure TElECDomainParameters.SetSeed(const Value : ByteArray);
begin
  FSeed := CloneArray(Value);
end;

procedure TElECDomainParameters.SetA(const V : ByteArray);
begin
  FA := CloneArray(V);
end;

procedure TElECDomainParameters.SetB(const V : ByteArray);
begin
  FB := CloneArray(V);
end;

procedure TElECDomainParameters.SetN(const V : ByteArray);
begin
  FN := CloneArray(V);
end;

procedure TElECDomainParameters.SetX(const V : ByteArray);
begin
  FX := CloneArray(V);
end;

procedure TElECDomainParameters.SetY(const V : ByteArray);
begin
  FY := CloneArray(V);
end;

procedure TElECDomainParameters.SetCurveOID(const Value : ByteArray);
begin
  FCurve := GetCurveByOID(Value);
  FCurveOID := CloneArray(Value);  
  SetupCurveParameters(FCurve);
end;

procedure TElECDomainParameters.Reset;
begin
  FField := SB_EC_FLD_CUSTOM;
  FFieldType := SB_EC_FLD_TYPE_UNKNOWN;
  FCurve := SB_EC_CUSTOM;
  FCurveOID := EmptyArray;
  SetLength(FA, 0);
  SetLength(FB, 0);
  SetLength(FN, 0);
  SetLength(FP, 0);
  SetLength(FX, 0);
  SetLength(FY, 0);
  
  FM := 0;
  FK1 := 0;
  FK2 := 0;
  FK3 := 0;
  FH := 0;
end;

function TElECDomainParameters.Check : boolean;
begin
  Result := false;
  
  if (FCurve < SB_EC_FIRST) or (FCurve > SB_EC_LAST) then
    Exit;

  if (FFieldType <> SB_EC_FLD_TYPE_FP) and (FFieldType <> SB_EC_FLD_TYPE_F2MP) then
    Exit;

  if (FField < SB_EC_FLD_FIRST) or (FField > SB_EC_FLD_LAST) then
    Exit;

  if Length(FA) = 0 then Exit;
  if Length(FB) = 0 then Exit;
  if Length(FP) = 0 then Exit;
  if Length(FN) = 0 then Exit;
  if Length(FX) = 0 then Exit;
  if Length(FY) = 0 then Exit;
  Result := true;
end;

{$ifdef ECC_TEST_INCLUDED}
procedure TestPointCompression;
var
  DomainParams : TElECDomainParameters;
  NX, NY, NN, X, Y, A, B, P, XR, YR : PLInt;
  Buf, XBuf, YBuf, NXBuf, NYBuf : ByteArray;
  BufSize, XSize, YSize : integer;
  Curve, i : integer;
begin
  LCreate(NX);
  LCreate(NY);
  LCreate(NN);
  LCreate(X);
  LCreate(Y);
  LCreate(P);
  LCreate(XR);
  LCreate(YR);
  LCreate(A);
  LCreate(B);
  DomainParams := TElECDomainParameters.Create;

  try
    NN.Length := 1;
    NN.Digits[1] :=  $DEADBEEF;

    for Curve := SB_EC_SECP256R1 to SB_EC_SECP256R1 do
    begin
      DomainParams.Curve := Curve;

      BufferToFieldElement(DomainParams.P, P, nil);
      BufferToFieldElement(DomainParams.X, X, P);
      BufferToFieldElement(DomainParams.Y, Y, P);
      BufferToFieldElement(DomainParams.A, A, P);
      BufferToFieldElement(DomainParams.B, B, P);

      if (DomainParams.FieldType = SB_EC_FLD_TYPE_FP) then
      begin
        if not ECPFpPointOnCurve(X, Y, A, B, P, DomainParams.Field) then
          raise EElECMathError.Create('');

        ECPFpExp(X, Y, P, A, NN, XR, YR, DomainParams.Field);
      end
      else if (DomainParams.FieldType = SB_EC_FLD_TYPE_F2MP) then
      begin
        if not ECPF2mPPointOnCurve(X, Y, A, B, P, DomainParams.Field) then
          raise EElECMathError.Create('');

        ECPF2mPExp(X, Y, A, B, P, NN, XR, YR, DomainParams.Field);  
      end
      else
        raise EElECMathError.Create('');

      XSize := Length(DomainParams.P);
      YSize := Length(DomainParams.P);
      SetLength(XBuf, XSize);
      SetLength(YBuf, YSize);
      LIntToPointerTrunc(XR, @XBuf[0], XSize);
      LIntToPointerTrunc(YR, @YBuf[0], YSize);
      SetLength(XBuf, XSize);
      SetLength(YBuf, YSize);
      BufSize := 0;

      PointToBuffer(@XBuf[0], XSize, @YBuf[0], YSize, DomainParams, nil, BufSize, true, false);
      SetLength(Buf, BufSize);
      PointToBuffer(@XBuf[0], XSize, @YBuf[0], YSize, DomainParams, @Buf[0], BufSize, true, false);
      SetLength(Buf, BufSize);

      XSize := 0;
      YSize := 0;
      BufferToPoint(@Buf[0], BufSize, DomainParams, nil, XSize, nil, YSize);

      if (XSize = 0) or (YSize = 0) then
        raise EElECError.Create('');

      SetLength(NXBuf, XSize);
      SetLength(NYBuf, YSize);

      if not BufferToPoint(@Buf[0], BufSize, DomainParams, @NXBuf[0], XSize, @NYBuf[0], YSize) then
         raise EElECError.Create('');

      SetLength(NXBuf, XSize);
      SetLength(NYBuf, YSize);

      i := 0;
      while (i < XSize) and (NXBuf[i] = 0) do Inc(i);
      if not CompareMem(@XBuf[0], @NXBuf[i], XSize - i) then
        raise EElECError.Create('');

      i := 0;
      while (i < YSize) and (NYBuf[i] = 0) do Inc(i);
      if not CompareMem(@YBuf[0], @NYBuf[i], YSize - i) then
        raise EElECError.Create('');
    end;
  finally
    FreeAndNil(DomainParams);

    LDestroy(NX);
    LDestroy(NY);
    LDestroy(NN);
    LDestroy(X);
    LDestroy(Y);
    LDestroy(P);
    LDestroy(XR);
    LDestroy(YR);
    LDestroy(A);
    LDestroy(B);

  end;
end;
 {$endif}

end.

